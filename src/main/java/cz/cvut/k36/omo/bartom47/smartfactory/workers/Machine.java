package cz.cvut.k36.omo.bartom47.smartfactory.workers;

import cz.cvut.k36.omo.bartom47.smartfactory.assembly.Assembly;
import cz.cvut.k36.omo.bartom47.smartfactory.consumables.Electricity;
import cz.cvut.k36.omo.bartom47.smartfactory.consumables.Oil;
import java.util.HashMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Represents Machine worker. <br>
 * This entity consumes {@link Oil} and {@link Electricity} by default.
 * @author Matej
 */
public class Machine extends RepairableWorker{
    public static final Logger LOG = LoggerFactory.getLogger(Machine.class);
    
    //TODO: Implement reading from config.properties
    /**
     * Represents default value of units consumed per tick of {@link Electricity}
     * @since 1.0 temporary solution only
     */
    private static final Integer ELECTRICITY_CONSUMPTION = 1; 
    
    //TODO: Implement reading from config.properties
    /**
     * Represents default value of units consumed per tick of {@link Electricity}
     * @since 1.0 temporary solution only
     */
    private static final Integer OIL_CONSUMPTION= 1;
    
    /**
     * Counter of created nodes with {@link #create(Assembly) }
     * @since 1.0 temporary solution only
     */
    private static Integer createCounter = 0;
    
    
    private Machine(Assembly assembly, String name) {
        super(assembly, name, new HashMap());        
    }
    
    /**
     * Factory method. Creates new machine with parameters given.
     * @param assembly parent assembly node
     * @param name name of the machine
     * @param electricityConsumptionPerTick electricity consumption per tick
     * @param oilConsumptionPerTick oil consumption per tick
     * @return new instance
     */
    public static Machine create(Assembly assembly, String name, 
            int electricityConsumptionPerTick, int oilConsumptionPerTick){
        final Machine m = new Machine(assembly, name);        
        final Electricity e = new Electricity(m, electricityConsumptionPerTick);
        final Oil o = new Oil(m, oilConsumptionPerTick);
        return m;
    }
    
    /**
     * Factory method. Creates new collaborative robot with class values 
     * of {@link #ELECTRICITY_CONSUMPTION} and {@link #OIL_CONSUMPTION}.     
     * @param assembly parnet assembly node
     * @param name name of the robot
     * @return new instance
     */
    public static Machine create(Assembly assembly, String name) {
        final Machine m = new Machine(assembly, name);
        final Electricity e = new Electricity(m, ELECTRICITY_CONSUMPTION);
        final Oil o = new Oil(m, OIL_CONSUMPTION);
        return m;
    }
    
    /**
     * Creates new collaborative robot with default name generated by
     * {@link #createCounter}
     * @param assembly parent assembly node
     * @return new instance
     * @see #Machine(Assembly, String) 
     */
    public static Machine create(Assembly assembly){
        createCounter++;
        return create(assembly, Machine.class.getSimpleName() + " " + createCounter);
    }
}
