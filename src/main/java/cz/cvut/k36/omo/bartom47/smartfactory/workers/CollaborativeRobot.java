package cz.cvut.k36.omo.bartom47.smartfactory.workers;

import cz.cvut.k36.omo.bartom47.smartfactory.assembly.Assembly;
import cz.cvut.k36.omo.bartom47.smartfactory.consumables.Consumable;
import cz.cvut.k36.omo.bartom47.smartfactory.consumables.Electricity;
import cz.cvut.k36.omo.bartom47.smartfactory.consumables.Oil;
import cz.cvut.k36.omo.bartom47.smartfactory.core.events.Event;
import java.util.HashMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Represents Collaborative Robot.<br>
 * This entity consumes {@link Oil} and {@link Electricity} by default.
 * @author Matej
 */
public class CollaborativeRobot extends RepairableWorker {
    private static final Logger LOG = LoggerFactory.getLogger(CollaborativeRobot.class);
    
    /**
     * Represents default value of units consumed per tick of {@link Electricity}
     * @since 1.0 temporary solution only
     */
    private static final Integer ELECTRICITY_CONSUMPTION = 1; //TODO: Implement reading config.properties
    
    /**
     * Represents default value of units consumed per tick of {@link Oil}
     * @since 1.0 temporary solution only
     */
    private static final Integer OIL_CONSUMPTION= 1; //TODO: Implement reading config.properties
    private static Integer createCounter = 0;

    private CollaborativeRobot(Assembly assembly, String name, HashMap<Consumable, Integer> unitConsumptionPerTick) {
        super(assembly, name, unitConsumptionPerTick);
    }
    
    /**
     * Factory method. Creates new collaborative rorbot.
     * @param assembly parent assembly
     * @param name name of the robot
     * @param electricityConsumptionPerTick electricity consumption per tick
     * @param oilConsumptionPerTick oil consumption per tick
     * @return new instance
     */
    public static CollaborativeRobot create(Assembly assembly, String name, 
            int electricityConsumptionPerTick, int oilConsumptionPerTick){
        final CollaborativeRobot m = new CollaborativeRobot(assembly, name, new HashMap());        
        final Electricity e = new Electricity(m, electricityConsumptionPerTick);
        final Oil o = new Oil(m, oilConsumptionPerTick);
        return m;
    }

    /**
     * Factory method. Creates new collaborative robot with class values 
     * of {@link #ELECTRICITY_CONSUMPTION} and {@link #OIL_CONSUMPTION}.     
     * @param assembly parnet assembly node
     * @param name name of the robot
     * @return new instance
     */
    public static CollaborativeRobot create(Assembly assembly, String name) {
        final CollaborativeRobot m = new CollaborativeRobot(assembly, name, new HashMap());
        final Electricity e = new Electricity(m, ELECTRICITY_CONSUMPTION);
        final Oil o = new Oil(m, OIL_CONSUMPTION);
        return m;
    }
    
    /**
     * Creates new collaborative robot with default name generated by
     * {@link #createCounter}
     * @param assembly parent assembly node
     * @return new instance
     * @see #create(Assembly, String) 
     */
    public static CollaborativeRobot create(Assembly assembly){
        createCounter++;
        return create(assembly, 
                CollaborativeRobot.class.getSimpleName() + " " + createCounter);
    }
    

    @Override
    public void handle(Event e) {
        super.handle(e);
    }
    
}
